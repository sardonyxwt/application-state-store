(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(1);
var Scope = /** @class */ (function () {
    function Scope(name, state) {
        this.name = name;
        this.state = state;
        this.isFrozen = false;
        this.actions = new Map();
        this.listeners = new Map();
    }
    /**
     * Registers a new action in scope.
     * @param {string} name The action name.
     * @param {Action} action The action that changes the scope
     * @throws {Error} Will throw an error if the scope frozen or action name exists in scope
     * when it is called.
     */
    Scope.prototype.registerAction = function (name, action) {
        if (this.isFrozen) {
            throw new Error("This scope is frozen you can't add new action.");
        }
        if (this.actions.has(name)) {
            throw new Error("Action name is duplicate in scope " + this.name);
        }
        this.actions.set(name, action);
    };
    /**
     * Dispatches an action. It is the only way to trigger a scope change.
     * @param {string} actionName Triggered action with same name.
     * This action change scope and return new scope.
     * You can use resolve to change the scope or reject to throw an exception.
     * @param {any?} props Additional data for the correct operation of the action.
     * @return {Promise<any>} You can use the promise to get a new state of scope
     * or catch errors.
     * @throws {Error} Will throw an error if the actionName not present in scope.
     */
    Scope.prototype.dispatch = function (actionName, props) {
        var _this = this;
        var action = this.actions.get(actionName);
        if (!action) {
            throw new Error("This action not exists " + actionName);
        }
        var oldScope = this.state;
        return new Promise(function (resolve, reject) {
            action(oldScope, props, resolve, reject);
        }).then(function (newScope) {
            utils_1.deepFreeze(newScope);
            _this.listeners.forEach(function (it) { return it({ oldScope: oldScope, newScope: newScope, actionName: actionName }); });
            _this.state = newScope;
            return newScope;
        });
    };
    /**
     * Adds a scope change listener.
     * It will be called any time an action is dispatched.
     * @param {Listener} listener A callback to be invoked on every dispatch.
     * By default use ROOT_SCOPE id.
     * @return {string} A listener id to remove this change listener later.
     */
    Scope.prototype.subscribe = function (listener) {
        var listenerId = utils_1.uniqueId('listener');
        this.listeners.set(listenerId, listener);
        return listenerId;
    };
    /**
     * Removes a scope change listener.
     * @param {string} id Id of the listener to delete.
     */
    Scope.prototype.unsubscribe = function (id) {
        this.listeners.delete(id);
    };
    /**
     * Prevents the addition of new actions to scope.
     */
    Scope.prototype.freeze = function () {
        this.isFrozen = true;
    };
    /**
     * Returns scope state.
     * @return {any} Scope state
     */
    Scope.prototype.getState = function () {
        return this.state;
    };
    return Scope;
}());
exports.Scope = Scope;
var scopes = new Map();
/**
 * Create a new scope and return it.
 * @param {string} name The name of scope
 * By default generate unique name
 * @param {any} initState The initial scope state.
 * By default use empty object.
 * @return {Scope} Scope.
 * @throws {Error} Will throw an error if name of scope not unique.
 */
function createScope(name, initState) {
    if (name === void 0) { name = utils_1.uniqueId('scope'); }
    if (initState === void 0) { initState = null; }
    if (scopes.has(name)) {
        throw new Error("Scope name must unique");
    }
    var scope = new Scope(name, initState);
    scopes.set(name, scope);
    return scope;
}
exports.createScope = createScope;
/**
 * Returns scope.
 * @param {string} scopeName Name scope, to get the Scope.
 * @return {Scope} Scope
 */
function getScope(scopeName) {
    return Array.from(scopes.values()).find(function (scope) { return scope.name === scopeName; });
}
exports.getScope = getScope;
/**
 * Returns all scope states.
 * @return {{string: any}} Scope states
 */
function getState() {
    var state = {};
    scopes.forEach(function (scope) { return state[scope.name] = scope.getState(); });
    return state;
}
exports.getState = getState;
/**
 * This scope is global
 * @type {Scope}
 */
exports.ROOT_SCOPE = createScope('rootScope', {});


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var indexes = {};
function makeSeed(length) {
    var CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var seed = "";
    for (var i = 0; i < length; i++)
        seed += CHARACTERS.charAt(Math.floor(Math.random() * CHARACTERS.length));
    return seed;
}
function uniqueId(name) {
    if (name === void 0) { name = 'default'; }
    indexes[name] ? ++indexes[name] : indexes[name] = 0;
    var index = indexes[name];
    return name + "-" + index + "-" + makeSeed(8);
}
exports.uniqueId = uniqueId;
function deepFreeze(obj) {
    Object.getOwnPropertyNames(obj).forEach(function (key) {
        var prop = obj[key];
        if (typeof prop == 'object' && prop !== null) {
            deepFreeze(prop);
        }
    });
    return Object.freeze(obj);
}
exports.deepFreeze = deepFreeze;


/***/ })
/******/ ]);
});
//# sourceMappingURL=state-store.min.js.map